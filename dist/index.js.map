{"version":3,"sources":["../lib/index.mjs"],"names":["allPlatforms","android","windows","ios","macos","linux","isPlatform","target","strict","navigator","window","platform","userAgent","platformMatch","test","agentMatch","agent","OSDetector","detected","os","undefined","isMobile","name","version","ram","cpuCount","deviceMemory","hardwareConcurrency","found","find"],"mappings":"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","sourcesContent":["import { android, macos, ios, linux, windows } from './platforms'\n\nconst allPlatforms = [android, windows, ios, macos, linux]\n\nfunction isPlatform (target, { strict = true, navigator = window.navigator } = {}) {\n  const { platform, userAgent } = navigator\n  const platformMatch = target.platform.test(platform)\n  const agentMatch = target.agent.test(userAgent)\n\n  return strict\n    ? platformMatch && agentMatch\n    : platformMatch || agentMatch\n}\n\nclass OSDetector {\n  constructor () {\n    this.detected = {\n      os: undefined,\n      isMobile: undefined,\n      name: undefined,\n      version: undefined,\n      ram: undefined,\n      cpuCount: undefined,\n      platform: undefined,\n      userAgent: undefined\n    }\n  }\n\n  static get types () {\n    return {\n      android,\n      ios,\n      linux,\n      macos,\n      windows\n    }\n  }\n\n  detect (navigator = window.navigator) {\n    // always assign navigator values\n    const { userAgent } = navigator\n    const { platform } = navigator\n    this.detected.userAgent = userAgent\n    this.detected.platform = platform\n    this.detected.ram = navigator.deviceMemory\n    this.detected.cpuCount = navigator.hardwareConcurrency\n\n    let found = allPlatforms.find(target => isPlatform(target, { strict: true, navigator }))\n    if (!found) {\n      found = allPlatforms.find(target => isPlatform(target, { strict: false, navigator }))\n    }\n\n    if (!found) {\n      this.detected.name = 'unknown'\n    } else {\n      this.detected.os = found.os\n      this.detected.version = found.version({ userAgent, platform })\n      this.detected.isMobile = found.isMobile({ userAgent, platform, version: this.detected.version })\n      this.detected.name = found.name({ userAgent, platform, version: this.detected.version })\n    }\n    return this.detected\n  }\n\n  isMobile () {\n    return this.detected.isMobile\n  }\n\n  os () {\n    return this.detected.os\n  }\n\n  platform () {\n    return this.detected.platform\n  }\n\n  userAgent () {\n    return this.detected.userAgent\n  }\n\n  name () {\n    return this.detected.name\n  }\n\n  version () {\n    return this.detected.version\n  }\n\n  ram () {\n    return this.detected.ram\n  }\n\n  cpuCount () {\n    return this.detected.cpuCount\n  }\n}\n\nexport default OSDetector\n"],"file":"index.js"}