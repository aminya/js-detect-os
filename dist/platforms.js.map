{"version":3,"sources":["../lib/platforms.mjs"],"names":["underscore","androidVersions","name","pattern","android","os","platform","agent","isMobile","version","userAgent","match","found","find","entry","test","arch","undefined","ios","replace","macosVersions","macos","windows","toLowerCase","indexOf","v","linux"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAG,IAAnB;AAEA,IAAMC,eAAe,GAAG,CACtB;AAAEC,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CADsB,EAEtB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAFsB,EAGtB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAHsB,EAItB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAJsB,EAKtB;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,OAAO,EAAE;AAAhC,CALsB,EAMtB;AAAED,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,OAAO,EAAE;AAA7B,CANsB,EAOtB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAPsB,EAQtB;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CARsB,EAStB;AAAED,EAAAA,IAAI,EAAE,oBAAR;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CATsB,EAUtB;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,OAAO,EAAE;AAA9B,CAVsB,EAWtB;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,OAAO,EAAE;AAAhC,CAXsB,EAYtB;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,OAAO,EAAE;AAA1B,CAZsB,EAatB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAbsB,EActB;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,OAAO,EAAE;AAA1B,CAdsB,EAetB;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,OAAO,EAAE;AAA5B,CAfsB,EAgBtB;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CAhBsB,CAAxB;AAkBO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,EAAE,EAAE,SADiB;AAErBC,EAAAA,QAAQ,EAAE,YAFW;AAGrBC,EAAAA,KAAK,EAAE,kCAHc;AAIrBC,EAAAA,QAAQ,EAAE;AAAA,WAAM,IAAN;AAAA,GAJW;AAKrBC,EAAAA,OALqB,mBAKZC,SALY,EAKD;AAClB,QAAMC,KAAK,GAAGD,SAAS,CAACC,KAAV,CAAgBP,OAAO,CAACG,KAAxB,CAAd;AACA,WAAOI,KAAK,IAAIA,KAAK,CAAC,CAAD,CAArB;AACD,GARoB;AASrBT,EAAAA,IATqB,sBASF;AAAA,QAAXO,OAAW,QAAXA,OAAW;AACjB,QAAMG,KAAK,GAAGX,eAAe,CAACY,IAAhB,CAAqB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACX,OAAN,CAAcY,IAAd,CAAmBN,OAAnB,CAAJ;AAAA,KAA1B,CAAd;AACA,WAAOG,KAAK,IAAIA,KAAK,CAACV,IAAtB;AACD,GAZoB;AAarBc,EAAAA,IAbqB,kBAab;AACN,WAAOC,SAAP;AACD;AAfoB,CAAhB;;AAkBA,IAAMC,GAAG,GAAG;AACjBb,EAAAA,EAAE,EAAE,KADa;AAEjBC,EAAAA,QAAQ,EAAE,gCAFO;AAGjBC,EAAAA,KAAK,EAAE,mCAHU;AAIjBC,EAAAA,QAAQ,EAAE;AAAA,WAAM,IAAN;AAAA,GAJO;AAKjBC,EAAAA,OALiB,0BAKO;AAAA,QAAbC,SAAa,SAAbA,SAAa;AACtB,QAAMC,KAAK,GAAGD,SAAS,CAACC,KAAV,CAAgBO,GAAG,CAACX,KAApB,CAAd;AACA,WAAOI,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAT,CAAiBnB,UAAjB,EAA6B,GAA7B,CAA5B;AACD,GARgB;AASjBE,EAAAA,IATiB,kBAST;AACN,WAAOe,SAAP;AACD,GAXgB;AAYjBD,EAAAA,IAZiB,kBAYT;AACN,WAAOC,SAAP;AACD;AAdgB,CAAZ;;AAiBP,IAAMG,aAAa,GAAG,CACpB;AAAElB,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,OAAO,EAAE;AAA7B,CADoB,EAEpB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAFoB,EAGpB;AAAED,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,OAAO,EAAE;AAAhC,CAHoB,EAIpB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAJoB,EAKpB;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CALoB,EAMpB;AAAED,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,OAAO,EAAE;AAA7B,CANoB,EAOpB;AAAED,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,OAAO,EAAE;AAA9B,CAPoB,EAQpB;AAAED,EAAAA,IAAI,EAAE,eAAR;AAAyBC,EAAAA,OAAO,EAAE;AAAlC,CARoB,EASpB;AAAED,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,OAAO,EAAE;AAAzB,CAToB,EAUpB;AAAED,EAAAA,IAAI,EAAE,cAAR;AAAwBC,EAAAA,OAAO,EAAE;AAAjC,CAVoB,EAWpB;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,OAAO,EAAE;AAA5B,CAXoB,EAYpB;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,OAAO,EAAE;AAA1B,CAZoB,EAapB;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,OAAO,EAAE;AAA5B,CAboB,EAcpB;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,OAAO,EAAE;AAA3B,CAdoB,EAepB;AAAED,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,OAAO,EAAE;AAAzB,CAfoB,EAgBpB;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,OAAO,EAAE;AAA5B,CAhBoB,CAAtB;AAmBO,IAAMkB,KAAK,GAAG;AACnBhB,EAAAA,EAAE,EAAE,OADe;AAEnBC,EAAAA,QAAQ,EAAE,QAFS;AAGnBC,EAAAA,KAAK,EAAE,yBAHY;AAInBC,EAAAA,QAAQ,EAAE;AAAA,WAAM,KAAN;AAAA,GAJS;AAKnBQ,EAAAA,IALmB,kBAKX;AACN,WAAOC,SAAP;AACD,GAPkB;AAQnBR,EAAAA,OARmB,0BAQK;AAAA,QAAbC,SAAa,SAAbA,SAAa;AACtB,QAAMC,KAAK,GAAGD,SAAS,CAACC,KAAV,CAAgBU,KAAK,CAACd,KAAtB,CAAd;AACA,WAAOI,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAAL,CAASQ,OAAT,CAAiBnB,UAAjB,EAA6B,GAA7B,CAA5B;AACD,GAXkB;AAYnBE,EAAAA,IAZmB,uBAYA;AAAA,QAAXO,OAAW,SAAXA,OAAW;AACjB,QAAMG,KAAK,GAAGQ,aAAa,CAACP,IAAd,CAAmB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACX,OAAN,CAAcY,IAAd,CAAmBN,OAAnB,CAAJ;AAAA,KAAxB,CAAd;AACA,WAAOG,KAAK,IAAIA,KAAK,CAACV,IAAtB;AACD;AAfkB,CAAd;;AAkBA,IAAMoB,OAAO,GAAG;AACrBjB,EAAAA,EAAE,EAAE,SADiB;AAErBC,EAAAA,QAAQ,EAAE,QAFW;AAGrBC,EAAAA,KAAK,EAAE,0EAHc;AAIrBC,EAAAA,QAAQ,EAAE;AAAA,QAAGE,SAAH,SAAGA,SAAH;AAAA,WAAmBA,SAAS,CAACa,WAAV,GAAwBC,OAAxB,CAAgC,eAAhC,IAAmD,CAAC,CAAvE;AAAA,GAJW;AAKrBR,EAAAA,IALqB,uBAKU;AAAA,QAAvBV,QAAuB,SAAvBA,QAAuB;AAAA,QAAbI,SAAa,SAAbA,SAAa;;AAC7B,QAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,aAAO,IAAP;AACD,KAH4B,CAI7B;AACA;AACA;;AACD,GAZoB;AAarBJ,EAAAA,IAbqB,kBAab;AACN,WAAOe,SAAP;AACD,GAfoB;AAgBrBR,EAAAA,OAhBqB,0BAgBG;AAAA,QAAbC,SAAa,SAAbA,SAAa;AACtB,QAAMC,KAAK,GAAGD,SAAS,CAACC,KAAV,CAAgBW,OAAO,CAACf,KAAxB,CAAd;AACA,QAAIkB,CAAJ;;AACA,QAAId,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;AACrB,cAAQA,KAAK,CAAC,CAAD,CAAb;AACE,aAAK,KAAL;AACA,aAAK,MAAL;AACE;AACAc,UAAAA,CAAC,GAAG,MAAJ;AACA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,KAAJ;AACA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,OAAJ;AACA;;AACF,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,aAAJ;AACA;;AACF,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,IAAJ;AACA;;AACF,aAAK,MAAL;AACEA,UAAAA,CAAC,GAAG,UAAJ;AACA;;AACF,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,MAAJ;AACA;;AACF,aAAK,KAAL;AACEA,UAAAA,CAAC,GAAG,KAAJ;AACA;;AACF;AACE;AACA;AAtCJ;AAwCD;;AACD,WAAOA,CAAP;AACD;AA9DoB,CAAhB;;AAiEA,IAAMC,KAAK,GAAG;AACnBrB,EAAAA,EAAE,EAAE,OADe;AAEnBG,EAAAA,QAAQ,EAAE;AAAA,QAAGE,SAAH,SAAGA,SAAH;AAAA,WAAmBA,SAAS,CAACa,WAAV,GAAwBC,OAAxB,CAAgC,MAAhC,IAA0C,CAAC,CAA9D;AAAA,GAFS;AAGnBlB,EAAAA,QAAQ,EAAE,cAHS;AAInBC,EAAAA,KAAK,EAAE,QAJY;AAKnBS,EAAAA,IALmB,uBAKY;AAAA,QAAvBV,QAAuB,SAAvBA,QAAuB;AAAA,QAAbI,SAAa,SAAbA,SAAa;;AAC7B,QAAIJ,QAAQ,CAACkB,OAAT,CAAiB,MAAjB,IAA2B,CAAC,CAAhC,EAAmC;AACjC,aAAO,IAAP;AACD;;AACD,QAAIlB,QAAQ,CAACkB,OAAT,CAAiB,QAAjB,IAA6B,CAAC,CAAlC,EAAqC;AACnC,aAAO,IAAP;AACD;AACF,GAZkB;AAanBtB,EAAAA,IAbmB,kBAaX;AACN,WAAOe,SAAP;AACD,GAfkB;AAgBnBR,EAAAA,OAhBmB,2BAgBK;AAAA,QAAbC,SAAa,UAAbA,SAAa;AACtB,WAAOO,SAAP;AACD;AAlBkB,CAAd","sourcesContent":["const underscore = /_/g\n\nconst androidVersions = [\n  { name: 'Nougat', pattern: /^10.*$/ },\n  { name: 'Nougat', pattern: /^9.*$/ },\n  { name: 'Nougat', pattern: /^8.+$/ },\n  { name: 'Nougat', pattern: /^7.+$/ },\n  { name: 'Marshmallow', pattern: /^6.+$/ },\n  { name: 'Lollipop', pattern: /^5.+$/ },\n  { name: 'KitKat', pattern: /^4.4.*$/ },\n  { name: 'Jelly Bean', pattern: /^4.[1-3].*$/ },\n  { name: 'Ice Cream Sandwich', pattern: /^4.0.*$/ },\n  { name: 'Honeycomb', pattern: /^3.+$/ },\n  { name: 'Gingerbread', pattern: /^2.3.*$/ },\n  { name: 'FroYo', pattern: /^2.2.*/ },\n  { name: 'Eclair', pattern: /^2.[0-1].*$/ },\n  { name: 'Donut', pattern: /^1.6.*$/ },\n  { name: 'Cupcake', pattern: /^1.5.*$/ },\n  { name: 'Petit Four', pattern: /^1.1.*$/ }\n]\nexport const android = {\n  os: 'android',\n  platform: /android.*/i,\n  agent: /(?:android|adr) (\\d+([._]\\d+)*)/i,\n  isMobile: () => true,\n  version (userAgent) {\n    const match = userAgent.match(android.agent)\n    return match && match[1]\n  },\n  name ({ version }) {\n    const found = androidVersions.find(entry => entry.pattern.test(version))\n    return found && found.name\n  },\n  arch () {\n    return undefined\n  }\n}\n\nexport const ios = {\n  os: 'ios',\n  platform: /(?:iphone|ipod|ipad|Pike v.*)/i,\n  agent: /os ((\\d+[._])+\\d+) like mac os x/i,\n  isMobile: () => true,\n  version ({ userAgent }) {\n    const match = userAgent.match(ios.agent)\n    return match && match[1] && match[1].replace(underscore, '.')\n  },\n  name () {\n    return undefined\n  },\n  arch () {\n    return undefined\n  }\n}\n\nconst macosVersions = [\n  { name: 'Catalina', pattern: /^10.15.*$/ },\n  { name: 'Mojave', pattern: /^10.14.*$/ },\n  { name: 'High Sierra', pattern: /^10.13.*$/ },\n  { name: 'Sierra', pattern: /^10.12.*$/ },\n  { name: 'El Capitan', pattern: /^10.11.*$/ },\n  { name: 'Yosemite', pattern: /^10.10.*$/ },\n  { name: 'Mavericks', pattern: /^10.9.*$/ },\n  { name: 'Mountain Lion', pattern: /^10.8.*$/ },\n  { name: 'Lion', pattern: /^10.7.*$/ },\n  { name: 'Snow Leopard', pattern: /^10.6.*$/ },\n  { name: 'Leopard', pattern: /^10.5.*$/ },\n  { name: 'Tiger', pattern: /^10.4.*$/ },\n  { name: 'Panther', pattern: /^10.3.*$/ },\n  { name: 'Jaguar', pattern: /^10.2.*$/ },\n  { name: 'Puma', pattern: /^10.1.*$/ },\n  { name: 'Cheetah', pattern: /^10.0.*$/ }\n]\n\nexport const macos = {\n  os: 'macos',\n  platform: /mac.*/i,\n  agent: /os x ((\\d+[._])+\\d+)\\b/i,\n  isMobile: () => false,\n  arch () {\n    return undefined\n  },\n  version ({ userAgent }) {\n    const match = userAgent.match(macos.agent)\n    return match && match[1] && match[1].replace(underscore, '.')\n  },\n  name ({ version }) {\n    const found = macosVersions.find(entry => entry.pattern.test(version))\n    return found && found.name\n  }\n}\n\nexport const windows = {\n  os: 'windows',\n  platform: /win.*/i,\n  agent: /win(?:dows)?(?: phone)?[ _]?(?:(?:nt|9x) )?((?:(\\d+\\.)*\\d+)|xp|me|ce)\\b/i,\n  isMobile: ({ userAgent }) => userAgent.toLowerCase().indexOf('windows phone') > -1,\n  arch ({ platform, userAgent }) {\n    if (platform === 'win64') {\n      return '64'\n    }\n    // useragent\n    // WOW64\n    // Win64\n  },\n  name () {\n    return undefined\n  },\n  version ({ userAgent }) {\n    const match = userAgent.match(windows.agent)\n    let v\n    if (match && match[1]) {\n      switch (match[1]) {\n        case '6.4':\n        case '10.0':\n          // some versions of Firefox mistakenly used 6.4\n          v = '10.0'\n          break\n        case '6.3':\n        case '8.1':\n          v = '8.1'\n          break\n        case '6.2':\n        case '8.0':\n          v = '8'\n          break\n        case '6.1':\n        case '7.0':\n          v = '7'\n          break\n        case '6.0':\n          v = 'Vista'\n          break\n        case '5.2':\n          v = 'Server 2003'\n          break\n        case '5.1':\n          v = 'XP'\n          break\n        case '5.01':\n          v = '2000 SP1'\n          break\n        case '5.0':\n          v = '2000'\n          break\n        case '4.0':\n          v = '4.0'\n          break\n        default:\n          // nothing\n          break\n      }\n    }\n    return v\n  }\n}\n\nexport const linux = {\n  os: 'linux',\n  isMobile: ({ userAgent }) => userAgent.toLowerCase().indexOf('mobi') > -1,\n  platform: /(?:linux.*)/i,\n  agent: /linux/i,\n  arch ({ platform, userAgent }) {\n    if (platform.indexOf('i686') > -1) {\n      return '32'\n    }\n    if (platform.indexOf('x86_64') > -1) {\n      return '64'\n    }\n  },\n  name () {\n    return undefined\n  },\n  version ({ userAgent }) {\n    return undefined\n  }\n}\n"],"file":"platforms.js"}